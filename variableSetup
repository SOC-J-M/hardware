#include<WiFiS3.h>
// #include<HTTPClient.h>

//#include<WifiClient.h>

const char ssid[] = "SpectrumSetup-7D";
const char pass[] = "manygate969"; 

WiFiClient client;
int status = WL_IDLE_STATUS;

//gio additions:
// add variables here (type name;)
char reportingNode;     // Will have an indeterminate value if local, 0 if global
char workCenter;
char department;
int employeeId;
char partNumber;
int workOrder;
int sequenceNum;
char progress;
time_t setupTime;       // Automatically initialized to zero if global
char dieSet;
int materialLot;
char statusCode;

int counterButtonPin = 3; // Button to increment the counter
int errorButtonPin = 5;   // Button to print "ERROR"
int errorFreeButtonPin = 6; // Button to print "ERROR FREE"
int buttonPressCounter = 0; // Counter for the number of button presses
unsigned long previous_time = 0;


void setup() {
  Serial.begin(9600);
  delay(1000);
  Serial.println(ssid);
  Serial.println(pass);

  while (status != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(ssid);
    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
    status = WiFi.begin(ssid, pass);
    if (status == 3){
      Serial.println("Successfully Connected");
    }
    // wait 10 seconds for connection:
    delay(500);
  }

  // Initialize pins as input with internal pull-up resistor
  pinMode(counterButtonPin, INPUT_PULLUP);
  pinMode(errorButtonPin, INPUT_PULLUP);
  pinMode(errorFreeButtonPin, INPUT_PULLUP);
}

void sendRequest() {
  if(WiFi.status() == WL_CONNECTED) {
    if (client.connect("192.168.1.178", 5001)) {
      client.println("GET /values HTTP/1.1");
      client.println("Host: 10.0.0.59");
      client.println("Connection: close");
      client.println();

      while (client.connected()) {
        if (client.available()) {
          Serial.write(client.read());
        }
      }
      client.stop();
    } else {
      Serial.println("Failed to connect to server.");
    }
  } else {
    Serial.println("WiFi not connected.");
  }
}

void loop() {

  unsigned long currentMillis = millis() - previous_time;
  // Button for counter
  if (digitalRead(counterButtonPin) == HIGH) {
    // Increment counter and print
    delay(10);
    if (digitalRead(counterButtonPin) == LOW){
      buttonPressCounter++;
      //Serial.print("Button presses: ");
      //Serial.println(buttonPressCounter);
      delay(200); // Debounce delay
    }
  }
  // delay(1000);
  // buttonPressCounter++;
  

  if (currentMillis >= 5000){
    previous_time = millis();
    //Serial.println("Time: ");
    //Serial.println(currentMillis);
    //Serial.println("Button after time: ");
    Serial.print(buttonPressCounter);
    Serial.print(",");
    Serial.println("WorkOrder");
    sendRequest();
    buttonPressCounter = 0;
  }

  

  // Button for "ERROR"
  // if (digitalRead(errorButtonPin) == LOW) {
  //   Serial.println("ERROR");
  //   delay(200); // Debounce delay
  // }

  // // Button for "ERROR FREE"
  // if (digitalRead(errorFreeButtonPin) == LOW) {
  //   Serial.println("ERROR FREE");
  //   delay(200); // Debounce delay
  // }
}
